%% PSO-MRRT* Algorithm Implementation
% Main function implementing PSO-MRRT* algorithm as described in the research paper
% "PSO-MRRT* Algorithm for Efficient Maritime Path Planning: Combining Particle Swarm Optimization and Multi-directional RRT*"

function [best_path, best_cost, stats] = PSO_MRRT_star(x_start, x_goal, obstacles, workspace, params)
    % Initialize parameters
    if nargin < 5
        params = get_default_params();
    end
    
    % Initialize trees
    T_start = initialize_tree(x_start);
    T_goal = initialize_tree(x_goal);
    
    % Initialize path set and statistics
    P = {};  % Set of found paths
    best_cost = inf;
    best_path = [];
    stats = struct('iterations', 0, 'paths_found', 0, 'nodes_explored', 0);
    
    % Adaptive sampling probabilities
    sampling_probs = initialize_sampling_probs();
    
    % Main algorithm loop
    for iter = 1:params.max_iterations
        % Alternate between trees
        if mod(iter, 2) == 0
            T_current = T_start;
            T_opposite = T_goal;
            current_type = 'start';
        else
            T_current = T_goal;
            T_opposite = T_start;
            current_type = 'goal';
        end
        
        % Update adaptive sampling probabilities
        sampling_probs = update_sampling_probs(sampling_probs, P, iter, params.max_iterations);
        
        % Adaptive sampling
        x_rand = adaptive_sampling(T_start, T_goal, P, workspace, obstacles, sampling_probs);
        
        % Standard RRT* extension
        x_nearest = nearest_node(T_current, x_rand);
        x_new = steer(x_nearest, x_rand, params.step_size);
        
        % Check collision
        if collision_free(x_nearest.pos, x_new, obstacles)
            % Find nearby nodes
            radius = get_radius(length(T_current.nodes), params.gamma, workspace);
            X_near = near_nodes(T_current, x_new, radius);
            
            % Choose parent with minimum cost
            [x_parent, min_cost] = choose_parent(X_near, x_nearest, x_new, obstacles);
            
            % Add new node to tree
            new_node = struct('pos', x_new, 'parent', x_parent, 'cost', min_cost, 'children', []);
            T_current.nodes = [T_current.nodes, new_node];
            
            % Update parent's children
            if ~isempty(x_parent)
                parent_idx = find_node_index(T_current, x_parent.pos);
                T_current.nodes(parent_idx).children = [T_current.nodes(parent_idx).children, length(T_current.nodes)];
            end
            
            % Rewire tree
            T_current = rewire_tree(T_current, X_near, new_node, obstacles);
            
            % Try connecting to opposite tree
            [connection_found, new_path, path_cost] = connect_trees(T_current, T_opposite, new_node, current_type, obstacles);
            
            if connection_found
                P{end+1} = new_path;
                if path_cost < best_cost
                    best_cost = path_cost;
                    best_path = new_path;
                end
                stats.paths_found = stats.paths_found + 1;
            end
        end
        
        % Periodic PSO optimization
        if mod(iter, params.optimization_interval) == 0 && ~isempty(P)
            P = optimize_paths_pso(P, obstacles, workspace, params);
            [best_path, best_cost] = update_best_path(P);
        end
        
        stats.iterations = iter;
        stats.nodes_explored = length(T_start.nodes) + length(T_goal.nodes);
        
        % Display progress
        if mod(iter, 500) == 0
            fprintf('Iteration %d: Best cost = %.2f, Paths found = %d\n', iter, best_cost, stats.paths_found);
        end
    end
    
    % Final optimization if paths exist
    if ~isempty(P)
        P = optimize_paths_pso(P, obstacles, workspace, params);
        [best_path, best_cost] = update_best_path(P);
    end
end

%% Tree Initialization Functions
function tree = initialize_tree(root_pos)
    root_node = struct('pos', root_pos, 'parent', [], 'cost', 0, 'children', []);
    tree = struct('nodes', root_node, 'root', root_pos);
end

%% Adaptive Sampling Functions
function probs = initialize_sampling_probs()
    probs = struct();
    probs.p_goal = 0.1;
    probs.p_density = 0.2;
    probs.p_narrow = 0.15;
    probs.p_path = 0.0;
    probs.p_uniform = 1 - (probs.p_goal + probs.p_density + probs.p_narrow + probs.p_path);
end

function probs = update_sampling_probs(probs, P, iter, max_iter)
    % Update probabilities based on algorithm progress
    if ~isempty(P)
        % After finding a path
        probs.p_path = 0.3 + 0.2 * (iter / max_iter);
        probs.p_goal = 0.05;
        probs.p_density = 0.15 - 0.1 * (iter / max_iter);
        probs.p_narrow = 0.1 - 0.05 * (iter / max_iter);
        probs.p_uniform = 1 - (probs.p_goal + probs.p_density + probs.p_narrow + probs.p_path);
    end
end

function x_rand = adaptive_sampling(T_start, T_goal, P, workspace, obstacles, probs)
    % Adaptive sampling strategy
    rand_val = rand();
    
    if rand_val < probs.p_goal
        % Goal biasing
        if rand() < 0.5
            x_rand = T_start.root + 0.1 * (rand(1,2) - 0.5);
        else
            x_rand = T_goal.root + 0.1 * (rand(1,2) - 0.5);
        end
    elseif rand_val < probs.p_goal + probs.p_density
        % Density-aware sampling
        x_rand = density_aware_sampling(T_start, T_goal, workspace);
    elseif rand_val < probs.p_goal + probs.p_density + probs.p_narrow
        % Narrow passage sampling
        x_rand = narrow_passage_sampling(obstacles, workspace);
    elseif rand_val < probs.p_goal + probs.p_density + probs.p_narrow + probs.p_path && ~isempty(P)
        % Path-guided sampling
        x_rand = path_guided_sampling(P);
    else
        % Uniform sampling
        x_rand = [workspace(1) + rand() * (workspace(2) - workspace(1)), ...
                  workspace(3) + rand() * (workspace(4) - workspace(3))];
    end
    
    % Ensure sample is within workspace
    x_rand(1) = max(workspace(1), min(workspace(2), x_rand(1)));
    x_rand(2) = max(workspace(3), min(workspace(4), x_rand(2)));
end

function x_rand = density_aware_sampling(T_start, T_goal, workspace)
    % Sample in areas with low node density
    grid_size = 20;
    x_range = linspace(workspace(1), workspace(2), grid_size);
    y_range = linspace(workspace(3), workspace(4), grid_size);
    
    density_grid = zeros(grid_size, grid_size);
    
    % Calculate density
    all_nodes = [T_start.nodes, T_goal.nodes];
    for i = 1:length(all_nodes)
        pos = all_nodes(i).pos;
        [~, x_idx] = min(abs(x_range - pos(1)));
        [~, y_idx] = min(abs(y_range - pos(2)));
        density_grid(y_idx, x_idx) = density_grid(y_idx, x_idx) + 1;
    end
    
    % Sample from low density areas
    inv_density = max(density_grid(:)) + 1 - density_grid;
    inv_density = inv_density / sum(inv_density(:));
    
    [row, col] = find(rand() < cumsum(inv_density(:)), 1);
    [r, c] = ind2sub(size(density_grid), row);
    
    x_rand = [x_range(c) + (rand()-0.5) * (x_range(2)-x_range(1))/grid_size, ...
              y_range(r) + (rand()-0.5) * (y_range(2)-y_range(1))/grid_size];
end

function x_rand = narrow_passage_sampling(obstacles, workspace)
    % Sample near narrow passages
    attempts = 0;
    max_attempts = 50;
    
    while attempts < max_attempts
        x_temp = [workspace(1) + rand() * (workspace(2) - workspace(1)), ...
                  workspace(3) + rand() * (workspace(4) - workspace(3))];
        
        % Check if point is near obstacles (potential narrow passage)
        min_dist = inf;
        for i = 1:length(obstacles)
            dist = point_to_polygon_distance(x_temp, obstacles{i});
            min_dist = min(min_dist, dist);
        end
        
        if min_dist > 0 && min_dist < 30  % Near obstacle but not inside
            x_rand = x_temp;
            return;
        end
        attempts = attempts + 1;
    end
    
    % Fallback to uniform sampling
    x_rand = [workspace(1) + rand() * (workspace(2) - workspace(1)), ...
              workspace(3) + rand() * (workspace(4) - workspace(3))];
end

function x_rand = path_guided_sampling(P)
    % Sample near existing paths
    if isempty(P)
        x_rand = [0, 0];
        return;
    end
    
    % Choose random path
    path_idx = randi(length(P));
    path = P{path_idx};
    
    if size(path, 1) < 2
        x_rand = path(1, :);
        return;
    end
    
    % Choose random point on path
    segment_idx = randi(size(path, 1) - 1);
    t = rand();
    
    point_on_path = (1-t) * path(segment_idx, :) + t * path(segment_idx+1, :);
    
    % Add noise
    noise = 20 * (rand(1, 2) - 0.5);
    x_rand = point_on_path + noise;
end

%% RRT* Core Functions
function nearest_node = nearest_node(tree, x_rand)
    min_dist = inf;
    nearest_node = tree.nodes(1);
    
    for i = 1:length(tree.nodes)
        dist = norm(tree.nodes(i).pos - x_rand);
        if dist < min_dist
            min_dist = dist;
            nearest_node = tree.nodes(i);
        end
    end
end

function x_new = steer(x_from, x_to, step_size)
    direction = x_to - x_from;
    dist = norm(direction);
    
    if dist <= step_size
        x_new = x_to;
    else
        x_new = x_from + step_size * (direction / dist);
    end
end

function is_free = collision_free(x_from, x_to, obstacles)
    % Check if path from x_from to x_to is collision-free
    num_checks = ceil(norm(x_to - x_from) / 0.5);  % Check every 0.5 units
    
    for i = 0:num_checks
        t = i / max(num_checks, 1);
        x_check = (1-t) * x_from + t * x_to;
        
        % Check collision with all obstacles
        for j = 1:length(obstacles)
            if point_in_polygon(x_check, obstacles{j})
                is_free = false;
                return;
            end
        end
    end
    is_free = true;
end

function near_nodes = near_nodes(tree, x_new, radius)
    near_nodes = [];
    
    for i = 1:length(tree.nodes)
        if norm(tree.nodes(i).pos - x_new) <= radius
            near_nodes = [near_nodes, tree.nodes(i)];
        end
    end
end

function [x_parent, min_cost] = choose_parent(X_near, x_nearest, x_new, obstacles)
    x_parent = x_nearest;
    min_cost = x_nearest.cost + norm(x_nearest.pos - x_new);
    
    for i = 1:length(X_near)
        node = X_near(i);
        new_cost = node.cost + norm(node.pos - x_new);
        
        if new_cost < min_cost && collision_free(node.pos, x_new, obstacles)
            x_parent = node;
            min_cost = new_cost;
        end
    end
end

function tree = rewire_tree(tree, X_near, new_node, obstacles)
    for i = 1:length(X_near)
        node = X_near(i);
        new_cost = new_node.cost + norm(new_node.pos - node.pos);
        
        if new_cost < node.cost && collision_free(new_node.pos, node.pos, obstacles)
            % Update parent
            old_parent_idx = find_node_index(tree, node.parent.pos);
            if ~isempty(old_parent_idx)
                % Remove from old parent's children
                tree.nodes(old_parent_idx).children = setdiff(tree.nodes(old_parent_idx).children, ...
                    find_node_index(tree, node.pos));
            end
            
            % Set new parent
            node_idx = find_node_index(tree, node.pos);
            new_node_idx = find_node_index(tree, new_node.pos);
            tree.nodes(node_idx).parent = new_node;
            tree.nodes(node_idx).cost = new_cost;
            tree.nodes(new_node_idx).children = [tree.nodes(new_node_idx).children, node_idx];
        end
    end
end

function radius = get_radius(num_nodes, gamma, workspace)
    % Calculate dynamic radius for RRT*
    area = (workspace(2) - workspace(1)) * (workspace(4) - workspace(3));
    radius = max(gamma * sqrt(log(num_nodes) / num_nodes), 15);
end

%% Tree Connection Functions
function [connection_found, path, cost] = connect_trees(T_current, T_opposite, new_node, current_type, obstacles)
    connection_found = false;
    path = [];
    cost = inf;
    
    % Find k nearest nodes from opposite tree
    k = min(5, length(T_opposite.nodes));
    distances = zeros(1, length(T_opposite.nodes));
    
    for i = 1:length(T_opposite.nodes)
        distances(i) = norm(new_node.pos - T_opposite.nodes(i).pos);
    end
    
    [~, sorted_indices] = sort(distances);
    
    for i = 1:k
        opposite_node = T_opposite.nodes(sorted_indices(i));
        
        if collision_free(new_node.pos, opposite_node.pos, obstacles)
            % Connection found - construct complete path
            if strcmp(current_type, 'start')
                path_to_start = extract_path_to_root(T_current, new_node);
                path_to_goal = extract_path_to_root(T_opposite, opposite_node);
                path = [path_to_start; flipud(path_to_goal)];
            else
                path_to_goal = extract_path_to_root(T_current, new_node);
                path_to_start = extract_path_to_root(T_opposite, opposite_node);
                path = [flipud(path_to_start); path_to_goal];
            end
            
            cost = calculate_path_cost(path);
            connection_found = true;
            break;
        end
    end
end

function path = extract_path_to_root(tree, node)
    path = [];
    current = node;
    
    while ~isempty(current)
        path = [current.pos; path];
        current = current.parent;
    end
end

function cost = calculate_path_cost(path)
    cost = 0;
    for i = 1:size(path, 1) - 1
        cost = cost + norm(path(i+1, :) - path(i, :));
    end
end

%% PSO Optimization Functions
function optimized_paths = optimize_paths_pso(P, obstacles, workspace, params)
    optimized_paths = P;
    
    for i = 1:length(P)
        if size(P{i}, 1) > 2  % Only optimize paths with intermediate points
            optimized_path = pso_optimize_single_path(P{i}, obstacles, workspace, params);
            if ~isempty(optimized_path)
                optimized_paths{i} = optimized_path;
            end
        end
    end
end

function optimized_path = pso_optimize_single_path(path, obstacles, workspace, params)
    if size(path, 1) <= 2
        optimized_path = path;
        return;
    end
    
    % PSO parameters
    num_particles = 20;
    max_iterations = 50;
    w = 0.7;  % Inertia weight
    c1 = 1.5; % Cognitive parameter
    c2 = 1.5; % Social parameter
    
    % Initialize particles (only intermediate points)
    intermediate_points = path(2:end-1, :);
    num_points = size(intermediate_points, 1);
    
    if num_points == 0
        optimized_path = path;
        return;
    end
    
    % Initialize particle positions and velocities
    particles = zeros(num_particles, num_points, 2);
    velocities = zeros(num_particles, num_points, 2);
    personal_best = zeros(num_particles, num_points, 2);
    personal_best_cost = inf(num_particles, 1);
    
    for p = 1:num_particles
        % Initialize with original path + noise
        particles(p, :, :) = intermediate_points + 10 * (rand(num_points, 2) - 0.5);
        
        % Ensure particles are in free space
        for pt = 1:num_points
            particles(p, pt, :) = project_to_free_space(squeeze(particles(p, pt, :)), obstacles, workspace);
        end
        
        % Initialize velocities
        velocities(p, :, :) = 2 * (rand(num_points, 2) - 0.5);
        
        % Calculate initial cost
        full_path = [path(1, :); squeeze(particles(p, :, :)); path(end, :)];
        cost = calculate_path_cost_with_collision_check(full_path, obstacles);
        
        if cost < inf
            personal_best(p, :, :) = particles(p, :, :);
            personal_best_cost(p) = cost;
        end
    end
    
    % Find global best
    [global_best_cost, best_idx] = min(personal_best_cost);
    global_best = squeeze(personal_best(best_idx, :, :));
    
    % PSO main loop
    for iter = 1:max_iterations
        for p = 1:num_particles
            for pt = 1:num_points
                % Update velocity
                r1 = rand(1, 2);
                r2 = rand(1, 2);
                
                cognitive = c1 .* r1 .* (squeeze(personal_best(p, pt, :))' - squeeze(particles(p, pt, :))');
                social = c2 .* r2 .* (global_best(pt, :) - squeeze(particles(p, pt, :))');
                
                velocities(p, pt, :) = w * squeeze(velocities(p, pt, :))' + cognitive + social;
                
                % Update position
                particles(p, pt, :) = squeeze(particles(p, pt, :))' + squeeze(velocities(p, pt, :))';
                
                % Ensure particle is in free space
                particles(p, pt, :) = project_to_free_space(squeeze(particles(p, pt, :)), obstacles, workspace);
            end
            
            % Evaluate new position
            full_path = [path(1, :); squeeze(particles(p, :, :)); path(end, :)];
            cost = calculate_path_cost_with_collision_check(full_path, obstacles);
            
            % Update personal best
            if cost < personal_best_cost(p)
                personal_best(p, :, :) = particles(p, :, :);
                personal_best_cost(p) = cost;
                
                % Update global best
                if cost < global_best_cost
                    global_best_cost = cost;
                    global_best = squeeze(particles(p, :, :));
                end
            end
        end
    end
    
    % Construct optimized path
    if global_best_cost < inf
        optimized_path = [path(1, :); global_best; path(end, :)];
    else
        optimized_path = path;
    end
end

function cost = calculate_path_cost_with_collision_check(path, obstacles)
    % Check if path is collision-free
    for i = 1:size(path, 1) - 1
        if ~collision_free(path(i, :), path(i+1, :), obstacles)
            cost = inf;
            return;
        end
    end
    
    % Calculate path length
    cost = calculate_path_cost(path);
end

function projected_point = project_to_free_space(point, obstacles, workspace)
    % Ensure point is within workspace
    point(1) = max(workspace(1), min(workspace(2), point(1)));
    point(2) = max(workspace(3), min(workspace(4), point(2)));
    
    % Check if point is in collision
    in_collision = false;
    for i = 1:length(obstacles)
        if point_in_polygon(point, obstacles{i})
            in_collision = true;
            break;
        end
    end
    
    if ~in_collision
        projected_point = point;
        return;
    end
    
    % Try to find nearby free space
    for radius = 5:5:50
        for angle = 0:pi/8:2*pi
            candidate = point + radius * [cos(angle), sin(angle)];
            
            % Check bounds
            if candidate(1) < workspace(1) || candidate(1) > workspace(2) || ...
               candidate(2) < workspace(3) || candidate(2) > workspace(4)
                continue;
            end
            
            % Check collision
            free = true;
            for i = 1:length(obstacles)
                if point_in_polygon(candidate, obstacles{i})
                    free = false;
                    break;
                end
            end
            
            if free
                projected_point = candidate;
                return;
            end
        end
    end
    
    % Fallback to original point
    projected_point = point;
end

%% Utility Functions
function [best_path, best_cost] = update_best_path(P)
    best_cost = inf;
    best_path = [];
    
    for i = 1:length(P)
        cost = calculate_path_cost(P{i});
        if cost < best_cost
            best_cost = cost;
            best_path = P{i};
        end
    end
end

function idx = find_node_index(tree, pos)
    idx = [];
    for i = 1:length(tree.nodes)
        if norm(tree.nodes(i).pos - pos) < 1e-6
            idx = i;
            return;
        end
    end
end

function inside = point_in_polygon(point, polygon)
    % Ray casting algorithm to check if point is inside polygon
    x = point(1);
    y = point(2);
    n = size(polygon, 1);
    inside = false;
    
    j = n;
    for i = 1:n
        xi = polygon(i, 1);
        yi = polygon(i, 2);
        xj = polygon(j, 1);
        yj = polygon(j, 2);
        
        if ((yi > y) ~= (yj > y)) && (x < (xj - xi) * (y - yi) / (yj - yi) + xi)
            inside = ~inside;
        end
        j = i;
    end
end

function dist = point_to_polygon_distance(point, polygon)
    % Calculate minimum distance from point to polygon
    min_dist = inf;
    n = size(polygon, 1);
    
    for i = 1:n
        j = mod(i, n) + 1;
        dist_to_segment = point_to_segment_distance(point, polygon(i, :), polygon(j, :));
        min_dist = min(min_dist, dist_to_segment);
    end
    
    dist = min_dist;
end

function dist = point_to_segment_distance(point, seg_start, seg_end)
    % Calculate distance from point to line segment
    v = seg_end - seg_start;
    w = point - seg_start;
    
    c1 = dot(w, v);
    if c1 <= 0
        dist = norm(point - seg_start);
        return;
    end
    
    c2 = dot(v, v);
    if c1 >= c2
        dist = norm(point - seg_end);
        return;
    end
    
    b = c1 / c2;
    projection = seg_start + b * v;
    dist = norm(point - projection);
end

function params = get_default_params()
    params = struct();
    params.max_iterations = 5000;
    params.step_size = 20;
    params.optimization_interval = 200;
    params.gamma = 150;  % RRT* parameter
end

%% Test Environment Functions
function obstacles = create_map1()
    % Map 1: Multiple rectangles
    obstacles = {};
    obstacles{1} = [100, 50; 150, 50; 150, 200; 100, 200];  % Vertical rectangle
    obstacles{2} = [200, 50; 250, 50; 250, 200; 200, 200];  % Vertical rectangle
    obstacles{3} = [50, 150; 300, 150; 300, 180; 50, 180];  % Horizontal rectangle
    obstacles{4} = [250, 250; 300, 250; 300, 300; 250, 300]; % Small rectangle
end

function obstacles = create_map2()
    % Map 2: Circle and pentagon with curved lines
    obstacles = {};
    
    % Circle
    theta = 0:pi/20:2*pi;
    radius = 30;
    center = [80, 80];
    obstacles{1} = [center(1) + radius * cos(theta)', center(2) + radius * sin(theta)'];
    
    % Pentagon
    angles = 0:2*pi/5:2*pi;
    pentagon_radius = 40;
    pentagon_center = [300, 300];
    obstacles{2} = [pentagon_center(1) + pentagon_radius * cos(angles)', ...
                    pentagon_center(2) + pentagon_radius * sin(angles)'];
end

function obstacles = create_map3()
    % Map 3: Four horizontal bars
    obstacles = {};
    obstacles{1} = [50, 80; 300, 80; 300, 100; 50, 100];
    obstacles{2} = [100, 140; 350, 140; 350, 160; 100, 160];
    obstacles{3} = [50, 200; 300, 200; 300, 220; 50, 220];
    obstacles{4} = [100, 260; 350, 260; 350, 280; 100, 280];
end

function obstacles = create_map4()
    % Map 4: I-shaped obstacle
    obstacles = {};
    obstacles{1} = [150, 50; 250, 50; 250, 80; 150, 80];    % Top bar
    obstacles{2} = [190, 80; 210, 80; 210, 270; 190, 270];  % Vertical bar
    obstacles{3} = [150, 270; 250, 270; 250, 300; 150, 300]; % Bottom bar
end

%% Visualization Functions
function visualize_result(obstacles, x_start, x_goal, best_path, workspace, algorithm_name)
    figure('Position', [100, 100, 800, 600]);
    hold on;
    
    % Draw obstacles
    for i = 1:length(obstacles)
        fill(obstacles{i}(:, 1), obstacles{i}(:, 2), [0.7, 0.7, 0.7], 'EdgeColor', 'black', 'LineWidth', 1.5);
    end
    
    % Draw start and goal
    plot(x_start(1), x_start(2), 'go', 'MarkerSize', 10, 'MarkerFaceColor', 'green', 'LineWidth', 2);
    plot(x_goal(1), x_goal(2), 'ro', 'MarkerSize', 10, 'MarkerFaceColor', 'red', 'LineWidth', 2);
    
    % Draw path
    if ~isempty(best_path)
        plot(best_path(:, 1), best_path(:, 2), 'b-', 'LineWidth', 3);
        plot(best_path(:, 1), best_path(:, 2), 'bo', 'MarkerSize', 4, 'MarkerFaceColor', 'blue');
    end
    
    % Set axis properties
    axis equal;
    xlim([workspace(1) - 20, workspace(2) + 20]);
    ylim([workspace(3) - 20, workspace(4) + 20]);
    grid on;
    
    % Labels and title
    xlabel('X');
    ylabel('Y');
    title(sprintf('%s Path Planning Result', algorithm_name));
    legend('Obstacles', 'Start', 'Goal', 'Path', 'Location', 'best');
    
    hold off;
end

%% Main Test Function
function run_pso_mrrt_star_experiments()
    % Test parameters
    workspace = [0, 400, 0, 350];  % [xmin, xmax, ymin, ymax]
    x_start = [20, 20];
    x_goal = [380, 330];
    
    % Test maps
    map_names = {'Map 1', 'Map 2', 'Map 3', 'Map 4'};
    map_functions = {@create_map1, @create_map2, @create_map3, @create_map4};
    
    % Results storage
    results = struct();
    
    fprintf('Starting PSO-MRRT* Experiments...\n');
    fprintf('================================\n\n');
    
    for map_idx = 1:length(map_functions)
        fprintf('Testing %s...\n', map_names{map_idx});
        
        % Create obstacles
        obstacles = map_functions{map_idx}();
        
        % Run PSO-MRRT*
        tic;
        [best_path, best_cost, stats] = PSO_MRRT_star(x_start, x_goal, obstacles, workspace);
        computation_time = toc;
        
        % Store results
        results.(sprintf('map%d', map_idx)) = struct();
        results.(sprintf('map%d', map_idx)).path = best_path;
        results.(sprintf('map%d', map_idx)).cost = best_cost;
        results.(sprintf('map%d', map_idx)).time = computation_time;
        results.(sprintf('map%d', map_idx)).stats = stats;
        
        % Display results
        fprintf('  Path length: %.2f\n', best_cost);
        fprintf('  Computation time: %.2f seconds\n', computation_time);
        fprintf('  Paths found: %d\n', stats.paths_found);
        fprintf('  Nodes explored: %d\n\n', stats.nodes_explored);
        
        % Visualize result
        visualize_result(obstacles, x_start, x_goal, best_path, workspace, ...
                        sprintf('PSO-MRRT* - %s', map_names{map_idx}));
    end
    
    % Summary
    fprintf('PSO-MRRT* Experiments Completed!\n');
    fprintf('================================\n');
    
    avg_cost = 0;
    avg_time = 0;
    total_paths = 0;
    total_nodes = 0;
    
    for map_idx = 1:4
        map_result = results.(sprintf('map%d', map_idx));
        avg_cost = avg_cost + map_result.cost;
        avg_time = avg_time + map_result.time;
        total_paths = total_paths + map_result.stats.paths_found;
        total_nodes = total_nodes + map_result.stats.nodes_explored;
    end
    
    fprintf('Average path length: %.2f\n', avg_cost / 4);
    fprintf('Average computation time: %.2f seconds\n', avg_time / 4);
    fprintf('Total paths found: %d\n', total_paths);
    fprintf('Average nodes explored: %.2f\n', total_nodes / 4);
end

%% Run the experiments
% Uncomment the line below to run the experiments
% run_pso_mrrt_star_experiments();
